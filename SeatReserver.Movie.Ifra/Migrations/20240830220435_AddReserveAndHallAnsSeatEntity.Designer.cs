// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeatReserver.Movie.Infrastructure.DbContexts.Sql.SqlServer;

#nullable disable

namespace SeatReserver.Movie.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240830220435_AddReserveAndHallAnsSeatEntity")]
    partial class AddReserveAndHallAnsSeatEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Halls.Hall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Halls.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeatNumber")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Movie.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Movies.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PosterImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Reserve.ReserveSeat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MovieSancId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReserveStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MovieSancId");

                    b.HasIndex("SeatId");

                    b.ToTable("ReserveSeats");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Sans.MovieSans", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SancId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("SancId");

                    b.ToTable("MovieSans");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Sans.Sans", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTImeOfSans")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartTimeOfSans")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sans");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Halls.Seat", b =>
                {
                    b.HasOne("SeatReserver.Movie.Domain.Entities.Halls.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Movies.Movie", b =>
                {
                    b.HasOne("SeatReserver.Movie.Domain.Entities.Movie.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Reserve.ReserveSeat", b =>
                {
                    b.HasOne("SeatReserver.Movie.Domain.Entities.Sans.MovieSans", "MovieSans")
                        .WithMany("ReserveSeats")
                        .HasForeignKey("MovieSancId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeatReserver.Movie.Domain.Entities.Halls.Seat", "Seat")
                        .WithMany("ReserveSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MovieSans");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Sans.MovieSans", b =>
                {
                    b.HasOne("SeatReserver.Movie.Domain.Entities.Movies.Movie", "Movie")
                        .WithMany("MovieSans")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeatReserver.Movie.Domain.Entities.Sans.Sans", "Sans")
                        .WithMany("MovieSans")
                        .HasForeignKey("SancId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Sans");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Halls.Hall", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Halls.Seat", b =>
                {
                    b.Navigation("ReserveSeats");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Movie.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Movies.Movie", b =>
                {
                    b.Navigation("MovieSans");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Sans.MovieSans", b =>
                {
                    b.Navigation("ReserveSeats");
                });

            modelBuilder.Entity("SeatReserver.Movie.Domain.Entities.Sans.Sans", b =>
                {
                    b.Navigation("MovieSans");
                });
#pragma warning restore 612, 618
        }
    }
}
